#!/usr/bin/env python3
import rospy
import smach
import smach_ros
from std_msgs.msg import String
from delta_amr_message.msg import cas2ndagv_io2state_out
from delta_amr_message.msg import cas2ndagv_io2state_in
from std_srvs.srv import Empty, EmptyResponse
from delta_amr_service.srv import amr_srv, amr_srvResponse
from delta_amr_service.srv import realsense_srv, realsense_srvResponse
from delta_amr_service.srv import robot_control_srv, robot_control_srvResponse
from delta_amr_service.srv import upload_srv, upload_srvResponse
from delta_amr_service.srv import amr_movement_control, amr_movement_controlResponse

# Need to add function: Realsense detect human distance
def human_detect(img_process_type_realsense):
    try:
        rospy.wait_for_service('realsense_srv', timeout = 2)
        image_process = rospy.ServiceProxy('realsense_srv', realsense_srv)
        response = image_process(img_process_type_realsense)
        return response.execute_bool, response.target_process
    except rospy.ROSException as e:
        rospy.logerr(f"Service call failed: {e}")
        return None, None
        
class Watch_OP(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['watching', 'Start_Mov'],output_keys=['shared_data'])
        self.counter = 0
        
    def execute(self, userdata):
        # rospy.sleep(5.0)
        # rospy.loginfo('For test: just go')
        # return 'Start_Mov'
        cas2ndag_out.lidarMAP = 'normal_walking'
        cas2ndag_out.light = 'standby'
        pub_cas2ndagv_io2status_out.publish(cas2ndag_out)
        img_process_type_realsense = 'human_detect'
        execute_bool, target_process = human_detect(img_process_type_realsense)
        cas2ndagv_set_light(1)
        rospy.loginfo('Executing state Watch_OP')
        rospy.sleep(1)
        if execute_bool == 1:
            rospy.loginfo('OP has leaved')
            # rospy.loginfo('target process is: ', target_process)
            userdata.shared_data = target_process
            return 'Start_Mov'
        else:
            rospy.loginfo('OP is working')
            return 'watching'
        

# Need to add function: Slow down and stop when human come close
class AMR_Mov(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Moving', 'Start_Pic'])
        self.counter = 0
        
    def execute(self, userdata):
        rospy.loginfo('Executing state AMR_Mov')
        try:
            rospy.wait_for_service('ser_amr_movement_control_straight', timeout = None)
            amr_move = rospy.ServiceProxy('ser_amr_movement_control_straight', amr_movement_control)
            response = amr_move(-0.2, 0.0, 0.95, 0.1, 1)
            # if response.amr_status == 'stop':
            return 'Start_Pic'
        except rospy.ROSException as e:
            rospy.logerr(f"Service call failed: {e}")
            return 'Moving'


def robot_move(robot_mov_type, robot_mov_point, robot_mov_speed):
    try:
        rospy.wait_for_service('robot_control_srv', timeout = 2)
        robot_process = rospy.ServiceProxy('robot_control_srv', robot_control_srv)
        response = robot_process(robot_mov_type, robot_mov_point, robot_mov_speed)
        return response.robot_running_status
    except rospy.ROSException as e:
        rospy.logerr(f"Service call failed: {e}")
        return None
        
# Need to add function: Integrate LiDAR slow down and stop
class Robot_Pic(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Picturing','Start_Back'], input_keys=['shared_data'])
        self.counter = 0
        
    def execute(self, userdata):
        rospy.loginfo('Executing state Robot_Pic')
        # target_process = userdata.shared_data  # Êé•Êî∂‰æÜËá™ Watch_OP ÁöÑËÆäÊï∏
        # rospy.loginfo(f"Received data: {target_process}")
        target_process = "A02"
        normal_speed_bool = True
        # prepare_pt_dict = {"A02"üôÅ"P2.0"], "A03"üôÅ"P3.0"]}
        move_pt_dict = {"A02"üôÅ"Apart1", "A1.0", "P1.1", "A1.0", "A2.0",\
                               "P2.1", "P2.2", "A2.0", "A3.0",\
                               "P3.1", "P3.2", "P3.3", "A3.0", "Apart1","aoihome"]} #, "A03"üôÅ"P3.0","P3.1", "P3.2", "P3.3"]}
        
        # pic_bool = False

        for i in move_pt_dict[target_process]:
            cas2ndag_out.light = 'workstation'
            cas2ndagv_set_light(0)
            robot_mov_type = 'MovP'
            robot_mov_point = i
            robot_mov_speed = 40
            # robot_mov_speed_low = 0.005
            print("robot_mov_point: ", robot_mov_point)
            _ = robot_move(robot_mov_type, robot_mov_point,robot_mov_speed)
            print("Finished")
            while True:
                cas2ndag_out.light = 'workstation'
                cas2ndagv_set_light(0)
                # move_cnt += 1
                if cas2ndag_in.lidarOSSD  == 'emergency_stop':
                    print("Change to Emergency stop")
                    _ = robot_move('stop', robot_mov_point,robot_mov_speed)
                    normal_speed_bool = False
                #elif cas2ndag_in.lidarOSSD  == 'slow_stop':
                #   _ = robot_move('stop', robot_mov_point,robot_mov_speed)
                #   _ = robot_move('MovL', robot_mov_point,robot_mov_speed_low)
                #    normal_speed_bool = False
                else:
                    if normal_speed_bool == False:
                        _ = robot_move('stop', robot_mov_point,robot_mov_speed)
                        _ = robot_move('MovP', robot_mov_point,robot_mov_speed)
                        normal_speed_bool = True
                
                # print(robot_move('is_reached', robot_mov_point,robot_mov_speed))
                if robot_move('is_reached', robot_mov_point,robot_mov_speed) == 'reached':
                    cas2ndag_out.light = 'standby'
                    pub_cas2ndagv_io2status_out.publish(cas2ndag_out)
                    break
                rospy.sleep(0.01)
            
            # Take pic, First point is prepare point
            if i[0] == "P":
                img_process_type_realsense = "A0" + i[1]
                print("img_process_type_realsense: ", img_process_type_realsense)
                # img_process_type_realsense = 'take_pic'
                human_dist, camera_status_realsense = human_detect(img_process_type_realsense)

                rospy.loginfo('Executing state IPC_Upload')
                upload_result = upload_img()
                rospy.sleep(1.0)
            # pic_bool = True
        '''
        _ = robot_move('MovP', move_pt_dict[target_process][0], robot_mov_speed)
        while True:
            if cas2ndag_in.lidarOSSD  == 'emergency_stop':
                    _ = robot_move('stop', move_pt_dict[target_process][0],robot_mov_speed)
                    normal_speed_bool = False
            else:
                if normal_speed_bool == False:
                    _ = robot_move('stop', move_pt_dict[target_process][0],robot_mov_speed)
                    _ = robot_move('MovP', move_pt_dict[target_process][0],robot_mov_speed)
                    normal_speed_bool = True
            if robot_move('is_reached', move_pt_dict[target_process][0],robot_mov_speed) == 'reached':
                    break
            rospy.sleep(0.01)
        _ = robot_move('MovP', "aoihome", robot_mov_speed)
        while True:
            if cas2ndag_in.lidarOSSD  == 'emergency_stop':
                    _ = robot_move('stop', "aoihome",robot_mov_speed)
                    normal_speed_bool = False
            else:
                if normal_speed_bool == False:
                    _ = robot_move('stop', "aoihome",robot_mov_speed)
                    _ = robot_move('MovP', "aoihome",robot_mov_speed)
                    normal_speed_bool = True
            if robot_move('is_reached', "aoihome",robot_mov_speed) == 'reached':
                    break
            rospy.sleep(0.01)
        '''
        return 'Start_Back'
        
        
# Need to add function: Slow down and stop when human come close
class AMR_Back(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Moving','Start_Upload'])
        self.counter = 0
        
    def execute(self, userdata):
        rospy.loginfo('Executing state AMR_Back')
        rospy.sleep(1.0)
        try:
            rospy.wait_for_service('ser_amr_movement_control_straight', timeout = None)
            amr_move = rospy.ServiceProxy('ser_amr_movement_control_straight', amr_movement_control)
            response = amr_move(0.2, 0.0, 0.94, 0.1, 0)
            # rospy.wait_for_service('amr_srv', timeout = None)
            # amr_move = rospy.ServiceProxy('amr_srv', amr_srv)
            # response = amr_move('backward')
            # if response.amr_status == 'stop':
            return 'Start_Upload'
        except rospy.ROSException as e:
            rospy.logerr(f"Service call failed: {e}")
            return 'Moving'
         
def upload_img():
    try:
        rospy.wait_for_service('upload_srv', timeout = 2)
        cas2ndag_out.light = 'handshake'
        pub_cas2ndagv_io2status_out.publish(cas2ndag_out)
        upload = rospy.ServiceProxy('upload_srv', upload_srv)
        response = upload("start")
        cas2ndag_out.light = 'standby'
        pub_cas2ndagv_io2status_out.publish(cas2ndag_out)
        return response.upload_status
    except rospy.ROSException as e:
        rospy.logerr(f"Service call failed: {e}")
        return None

class IPC_Upload(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Uploading','Start_Watch_OP'])
        self.counter = 0
        
    def execute(self, userdata):
        rospy.loginfo('Skip upload')
        return 'Start_Watch_OP'
        
        '''
        rospy.loginfo('Executing state IPC_Upload')
        upload_result = upload_img()
        rospy.sleep(1.0)
        if upload_result == 'done':
            rospy.loginfo("data upload completed!!!")
            return 'Start_Watch_OP'
        elif self.counter > 5:
            rospy.loginfo("Too many fails")
            return 'Start_Watch_OP'
        else:
            rospy.logerr(f"upload failed")
            self.counter += 1
            return 'Uploading'
         '''
# main
def main():
    rospy.init_node('smach_example_state_machine')

    # Create a SMACH state machine
    sm = smach.StateMachine(outcomes=['outcome4', 'outcome5'])

    # Open the container
    with sm:
        # Add states to the container
        smach.StateMachine.add('Watch_OP', Watch_OP(), 
                               transitions={'watching':'Watch_OP',
                                            'Start_Mov':'AMR_Mov'},
                           remapping={'shared_data':'shared_data'})
        smach.StateMachine.add('AMR_Mov', AMR_Mov(), 
                               transitions={'Moving':'AMR_Mov',
                                            'Start_Pic':'Robot_Pic'})
        smach.StateMachine.add('Robot_Pic', Robot_Pic(), 
                               transitions={'Picturing':'Robot_Pic',
                                            'Start_Back':'AMR_Back'},
                           remapping={'shared_data':'shared_data'})
        smach.StateMachine.add('AMR_Back', AMR_Back(), 
                               transitions={'Moving':'AMR_Back',
                                            'Start_Upload':'IPC_Upload'})
        smach.StateMachine.add('IPC_Upload', IPC_Upload(), 
                               transitions={'Uploading':'IPC_Upload',
                                            'Start_Watch_OP':'Watch_OP'})

    # Create and start the introspection server
    sis = smach_ros.IntrospectionServer('my_smach_introspection_server', sm, '/SM_ROOT')
    sis.start()

    # Execute SMACH plan
    outcome = sm.execute()

    # Check the outcome and perform specific actions
    if outcome == 'outcome4':
        rospy.loginfo("State machine terminated with outcome4. Executing specific actions for outcome4.")
        # Add outcome4 termination behaviorÔºåe.g. msg or other data storage
    elif outcome == 'outcome5':
        rospy.loginfo("State machine terminated with outcome5. Executing specific actions for outcome5.")
        # Add outcome5 termination behaviorÔºåe.g. msg or other data storage

    # Wait for ctrl-c to stop the application
    rospy.spin()
    sis.stop()

def sub_cas2ndagv_io2status_in_callback(data):
    cas2ndag_in.lidarOSSD = data.lidarOSSD
    cas2ndag_in.EMS = data.lidarOSSD
    # rospy.loginfo('lidarOSSD = %s', data.lidarOSSD)
    # rospy.loginfo('lidarMAP = %s', data.EMS)

def sub_cas2ndagv_io2status_out_callback(data):
    cas2ndag_out.lidarMAP = data.lidarMAP
    cas2ndag_out.light = data.light

def cas2ndagv_set_light(sw):
    if cas2ndag_in.lidarOSSD == 'emergency_stop':
        cas2ndag_out.light = 'error'
    elif cas2ndag_in.EMS == 'emergency_stop':
        cas2ndag_out.light = 'error'
    if(sw==1):
        if cas2ndag_in.lidarOSSD == 'normal':
            cas2ndag_out.light = 'standby'
        elif cas2ndag_in.lidarOSSD == 'slow_stop':
            cas2ndag_out.light = 'standby'
        elif cas2ndag_in.EMS == 'normal':
            cas2ndag_out.light = 'standby'
    pub_cas2ndagv_io2status_out.publish(cas2ndag_out)

cas2ndag_out = cas2ndagv_io2state_out()
cas2ndag_in = cas2ndagv_io2state_in()           
pub_cas2ndagv_io2status_out = rospy.Publisher('TOPIC_cas2ndagv_io2state_out', cas2ndagv_io2state_out, queue_size=100)
sub_cas2ndagv_io2status_in = rospy.Subscriber('TOPIC_cas2ndagv_io2state_in', cas2ndagv_io2state_in, sub_cas2ndagv_io2status_in_callback)
sub_cas2ndagv_io2status_out = rospy.Subscriber('TOPIC_cas2ndagv_io2state_out', cas2ndagv_io2state_out, sub_cas2ndagv_io2status_out_callback)
if _name_ == '_main_':
    main()

'''
def talker():
    pub = rospy.Publisher('/realsense_camera/command', String, queue_size=10)
    rospy.init_node("State_machine", anonymous = True)
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
    	command = "capture_image"  # ÁôºÈÄÅÁöÑÊåá‰ª§ÂÖßÂÆπ
    	pub.publish(command)
    	rate.sleep()
    	
if _name_ == '_main_':
    try:
    	talker()
    except rospy.ROSInterruptException:
        pass
'''